// This is supporting software for CS321 Compilers and Language Design I
// Copyright (c) Portland State University
//
//----------------------------------------------------------------------
// miniJava Grammar (JavaCC Specification)
//
// (For CS321 Winter 2015 - Jingke Li)
//----------------------------------------------------------------------
//
//Tyler Alway

// options { DEBUG_PARSER=true; }  /* Show debugging info */

PARSER_BEGIN(mjLLGrammar)
import java.io.*;

public class mjLLGrammar {
  public static void main(String [] args) {
    try {
      if (args.length == 1) {
	FileInputStream stream = new FileInputStream(args[0]);
	new mjLLGrammar(stream).Program();
	stream.close();
      } else {
	System.out.println("Need a file name as command-line argument.");
      }
    } catch (TokenMgrError e) {
      System.err.println(e);
    } catch (Exception e) {
      System.err.println(e);
    }
  }
}
PARSER_END(mjLLGrammar)

//
// LEXER SECTION ---------------------------------------------------------------
//

SKIP : /* White space */
{
  " " | "\t" | "\n" | "\r" | "\f"
}

SKIP : /* Comments -- multi-line form and error detection not included */
{
  <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> 
}

TOKEN : /* Keywords */
{
  "class" | "extends" | "static" | "public" | "void" | "int" | "double" 
| "boolean" | "new" | "this" | "if" | "else" | "while" | "return" | "main"
| "true" | "false"  | "String" | "System" | "out" | "println" 
}

TOKEN : /* Internal tokens */
{
  <#DIGIT:  ["0"-"9"]>
| <#LETTER: (["A"-"Z"]|["a"-"z"])>
}

TOKEN : /* Integer literals */
{
  <INTLIT: (<DIGIT>)+> 
  { try { 
      Integer.parseInt(matchedToken.image); 
    } catch (Exception e) { 
      throw new TokenMgrError("Lexical error at line " + matchedToken.beginLine + 
			      ", column " + matchedToken.beginColumn + 
			      ". Integer overflow: " + matchedToken.image, 0);
    } 
  }
}

TOKEN : /* Double literals */
{
  <DBLLIT: (<DIGIT>)+"."(<DIGIT>)*|(<DIGIT>)*"."(<DIGIT>)+> 
  { try { 
      Double.parseDouble(matchedToken.image); 
    } catch (Exception e) { 
      throw new TokenMgrError("Lexical error at line " + matchedToken.beginLine + 
			      ", column " + matchedToken.beginColumn + 
			      ". Malformed double: " + matchedToken.image, 0);
    } 
  }
}

TOKEN : /* String literals */
{
  <STRLIT: ("\"" (~["\"","\n"])* "\"")>
}

TOKEN : /* Identifiers */
{
  <ID: <LETTER> (<LETTER>|<DIGIT>)*>
}

TOKEN : /* Operators and delimiters */
{
   "+" | "-" | "*" | "/" | "&&" | "||" | "!" 
|  "==" | "!=" | "<" | "<=" | ">" | ">="
|  "=" | ";" | "," | "." | "(" | ")" | "[" | "]" | "{" | "}"
}

//
// PARSER SECTION ---------------------------------------------------------------
//

// Program -> {ClassDecl}
//
void Program(): {}
{
  (ClassDecl())* <EOF>
}

// ClassDecl -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
//
void ClassDecl(): {}
{
  "class" <ID> ["extends" <ID>] "{" (VarDecl())* (MethodDecl())* "}"
}







//MethodDecl -> "public" MethodDecl MethodDecl2	
//				
//MethodDecl1 -> ExtType <ID> "(" [Param {"," Param}] ")" 
//           |   "static" "void" "main" "(" "String" "[" "]" <ID> ")"
//
//MethodDecl2 -> "{" {VarDecl} {Stmt} "}"
//
//

void MethodDecl(): {} 
{
  "public"  MethodDecl1() MethodDecl2()
}


void MethodDecl1(): {} 
{
  ExtType() <ID> "(" [Param() ("," Param())*] ")" 
| "static" "void" "main" "(" "String" "[" "]" <ID> ")"    
}

void MethodDecl2(): {} 
{
  "{" (LOOKAHEAD(2) VarDecl())* (Stmt())* "}"
}







// Param -> Type <ID> 
//
void Param(): {} 
{
  Type() <ID> 
}

// VarDecl -> Type <ID> ["=" InitExpr] ";"
//  
void VarDecl(): {}
{
  Type() <ID> ["=" InitExpr()] ";"
}

// ExtType -> Type | "void"
//
void ExtType(): {}
{
  Type() | "void"
}









//Type       -> BasicType Type1                            
//           |  <ID>                          // object type
//
//Type1       -> ["[" "]"]                      // array type
//
void Type(): {}
{
  BasicType() Type1()
| <ID>
}

void Type1(): {}
{
  ["[" "]"]
}













// BasicType -> "int" | "double" | "boolean"
//
void BasicType(): {}
{
  "int" | "double" | "boolean"
}















//Stmt     ->   "{" {Stmt} "}"                         // stmt block
//           |  ExtId Stmt1
//           |  "if" "(" Expr ")" Stmt ["else" Stmt]    
//           |  "while" "(" Expr ")" Stmt               
//           |  "System" "." "out" "." "println" 
//                "(" [PrArg] ")" ";"                
//           |  "return" [Expr] ";"                     
//
//		   
//Stmt1    -> "(" [Args] ")" ";"            // call stmt
//           | Lvalue1  "=" InitExpr ";"    // assignment
//
void Stmt(): {}
{
  "{" (Stmt())* "}"
| ExtId() Stmt1()
| "if" "(" Expr() ")" Stmt() [LOOKAHEAD(1) "else" Stmt()]
| "while" "(" Expr() ")" Stmt()
| "System" "." "out" "." "println" "(" [ PrArg() ] ")" ";"  
| "return" [Expr()] ";"
}


void Stmt1(): {}
{
  "(" [Args()] ")" ";"
| Lvalue1() "=" InitExpr() ";"
}













// Args -> Expr {"," Expr}
//
void Args(): {}
{
  Expr() ("," Expr())*
}

// PrArg -> Expr | <STRLIT>
//
void PrArg(): {}
{
  Expr() | <STRLIT>
}









//InitExpr   -> "new" InitExpr1
//           |  Expr 
//
//InitExpr1   -> BasicType "[" <INTLIT> "]"    // new array
//           |  <ID> "(" ")"                  // new object 
//
void InitExpr(): {}
{
  "new" InitExpr1()
| Expr()
}

void InitExpr1(): {}
{
  BasicType() "[" <INTLIT> "]" 
| <ID> "(" ")"
}


















		   
		   
//Expr        -> Or()
//					
//Term        -> Literal()
//            | ExtId() Term1()	
//
//Term1       -> "(" [Args()] ")"          // method call 			
//            |  Lvalue1()
//
//paren       -> paren1() Term()
//
//
//paren1      -> ["(" Expr() ")"  ]
//
//Neg         -> ["-"] paren()
//
//Not         -> ["!"] Neg()
//			
//Mult        -> Not() Mult1() 
//
//Mult1       -> ["*" Not() Mult1()] 
//
//                      
//Div         -> Mult() Div1()
//
//            	
//Div1        -> ["/" Mult() Div1()]
//
//            					
//Plus        -> Div() Plus1()
//
//					
//Plus1       -> ["+" Div() Plus1()]
//
//	
//Minus       -> Plus() Minus1()
//
//          
//Minus1      -> ["-" Plus() Minus1()]
//
//		
//Equal       -> Minus() Equal1()
//
//			
//Equal1      -> ["==" Minus() Equal1()]
//
//  
//NotEqual    -> Equal() NotEqual1()
//
//		
//NotEqual1   -> ["!=" Equal() NotEqual1()]
//
//
//Less        -> NotEqual() Less1()
//	
//
//Less1       -> ["<" NotEqual() Less1()]
//
//
//LessOrEqual -> Less() LessOrEqual1()
//
//		
//LessOrEqual1 -> ["<=" Less() LessOrEqual1()]
//
//
//Greater     -> LessOrEqual() Greater1()
//
//			
//Greater1    -> [">" LessOrEqual() Greater1()]
//
//            
//GreaterOrEqual  -> Greater() GreaterOrEqual1()
//
//
//GreaterOrEqual1 -> [">=" Greater() GreaterOrEqual1()]
//
//                
//And()       ->GreaterOrEqual And1
//
//		
//And1        ->["&&" GreaterOrEqual() And1()]
//
//Or          ->And() Or1()
//
//Or1         ->["||" And() Or1()] 	



		   
void Expr(): {} {
  Or()
}
						
					
void Term(): {} {			
   Literal()
|  ExtId() 	Term1()	

}

void Term1(): {} {			

"(" [Args()] ")"          // method call 			
|  Lvalue1()
}


void paren(): {} {
  paren1() Term()
}



void paren1(): {} {
  ["(" Expr() ")"  ]
}


void Neg(): {} {
["-"] paren()
}

void Not(): {} {
["!"] Neg()

}
	
			
void Mult(): {} {
Not() Mult1() 
}

void Mult1 (): {} {
  ["*" Not() Mult1()] 
}
                      
void Div(): {} {
  Mult() Div1()
}
            	
void Div1(): {} {
 ["/" Mult() Div1()]
}
            					
void Plus(): {} {
  Div()	Plus1()
}
					
void Plus1(): {} {
  ["+" Div() Plus1()]
}
	
void Minus(): {} {
  Plus() Minus1()
}
          
void Minus1(): {} {
  ["-" Plus() Minus1()]
}
		
void Equal(): {} {
  Minus() Equal1()
}
			
void Equal1(): {} {
  ["==" Minus() Equal1()]
}
  
void NotEqual(): {} {
  Equal() NotEqual1()
}
		
void NotEqual1(): {} {
  ["!=" Equal() NotEqual1()]
}

void Less(): {} {
  NotEqual() Less1()
}	

void Less1(): {} {
  ["<" NotEqual() Less1()]
}

void LessOrEqual(): {} {
  Less() LessOrEqual1()
}
		
void LessOrEqual1(): {} {
  ["<=" Less() LessOrEqual1()]
}

void Greater(): {} {
  LessOrEqual() Greater1()
}
			
void Greater1(): {} {
  [">" LessOrEqual() Greater1()]
}
            
void GreaterOrEqual(): {} {
  Greater() GreaterOrEqual1()
}

void GreaterOrEqual1(): {} {
  [">=" Greater() GreaterOrEqual1()]
}
                
void And(): {} {
  GreaterOrEqual() And1()
}
		
void And1(): {} {
  ["&&" GreaterOrEqual() And1()]
}
void Or(): {} {
  And() Or1()
}

void Or1(): {} {
  ["||" And() Or1()] 	
}			
			


//Lvalue     -> ExtId Lvalue1
//		   
//Lvalue1     -> ["[" Expr "]"]            // array element
//
void Lvalue(): {}
{
  ExtId() Lvalue1()
}

void Lvalue1(): {}
{
  ["[" Expr() "]"] // array element

}


// ExtId -> ["this" "."] <ID> {"." <ID>} 
//
void ExtId(): {}
{
  ["this" "."] <ID> ("." <ID>)*
}

// Literal -> <INTLIT> | <DBLLIT> | "true" | "false"
//
void Literal(): {}
{
  <INTLIT> | <DBLLIT> | "true" | "false"
}

// BinOp -> "+" | "-" | "*" | "/" | "&&" | "||" 
//       |  "==" | "!=" | "<" | "<=" | ">" | ">=" 
//
void BinOp(): {}
{
  "+"  | "-"  | "*" | "/"  | "&&" | "||" 
| "==" | "!=" | "<" | "<=" | ">"  | ">=" 
}

// UnOp -> "-" | "!"
//
void UnOp(): {}
{
  "-" | "!"
}
